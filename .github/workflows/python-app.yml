# This workflow is designed for a Python application.
# It will run a series of checks on your code for quality and correctness.

name: Python Application CI

# --- Triggers ---
# This workflow runs on pushes to the 'main' branch and on pull requests.
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

# --- Permissions ---
# Sets default permissions for the GITHUB_TOKEN for security.
permissions:
  contents: read

# --- Jobs ---
# Defines the series of tasks to be executed.
jobs:
  build:
    # --- Environment ---
    # Specifies the operating system and Python versions to test against.
    # It will run the job twice: once for Python 3.11 and once for 3.12.
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      # --- Step 1: Check out the repository ---
      # This step downloads a copy of your code into the runner.
      - uses: actions/checkout@v4

      # --- Step 2: Set up Python ---
      # This step installs the specific Python version defined in the matrix.
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # --- Step 3: Cache Dependencies ---
      # This step caches the installed packages to speed up future runs.
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # --- Step 4: Install Dependencies ---
      # This step installs all the packages listed in your requirements.txt file.
      # It also installs 'ruff', the linter we will use.
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # --- Step 5: Lint with Ruff ---
      # This is the main quality check. Ruff will scan all Python files for
      # style errors, unused variables, and other common issues.
      # The '--format=github' flag makes the output appear nicely in the GitHub UI.
      - name: Lint with ruff
        run: |
          ruff check --output-format=github .

      # --- Step 6 (Optional but Recommended): Format Check ---
      # This step checks if your code is formatted according to Ruff's standards.
      # It doesn't change any files, it just fails if the code isn't formatted.
      # This encourages consistent formatting across the whole project.
      - name: Check formatting with ruff
        run: |
          ruff format --check .
